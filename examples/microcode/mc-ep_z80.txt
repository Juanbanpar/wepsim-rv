
#
# WepSIM (https://wepsim.github.io/wepsim/)
#

begin,
native
{
                  if (simcore_native_get_signal("INT") == 1)
                  {
                        // RT1 <- MBR <- DB <- INTV
                        var value  = simcore_native_get_value("CPU", "INTV") ;
                        simcore_native_set_value("CPU", "REG_RT1", value) ;

                        // INT down, INTA up
                        simcore_native_set_signal("INT",  0) ;
                        simcore_native_set_signal("INTA", 1) ;

                        // push PC
                        value  = simcore_native_get_value("CPU", "REG_PC") ;
                        var reg_sp = simcore_native_get_value("BR", 29) ;
                        reg_sp = reg_sp - 4 ;
                        simcore_native_set_value("MEMORY", reg_sp, value) ;
                        simcore_native_set_value("BR", 29, reg_sp) ;

                        // push SR
                        value  = simcore_native_get_value("CPU", "REG_SR") ;
                        reg_sp = simcore_native_get_value("BR", 29) ;
                        reg_sp = reg_sp - 4 ;
                        simcore_native_set_value("MEMORY", reg_sp, value) ;
                        simcore_native_set_value("BR", 29, reg_sp) ;

                        // MAR <- RT1*4
                        var addr = simcore_native_get_value("CPU", "REG_RT1") ;
                        addr = 4 * addr ;
                        simcore_native_set_value("CPU", "REG_MAR", addr) ;

                        // PC <- MBR <- MP[MAR]
                        addr = simcore_native_get_value("MEMORY", addr) ;
                        simcore_native_set_value("CPU", "REG_PC", addr) ;

                        // fetch
                        simcore_native_go_maddr(0) ;
                }

                var addr  = simcore_native_get_value("CPU", "REG_PC") ;
                var value = simcore_native_get_value("MEMORY", addr) ;

                simcore_native_set_value("CPU", "REG_IR", value) ;
                simcore_native_set_value("CPU", "REG_PC", addr + 4) ;

                simcore_native_deco() ;
                simcore_native_go_opcode() ;
}


#
# INT
#

syscall {
            co=111111,
            nwords=1,
            native,
            {
                        simcore_native_set_value("CPU", "REG_RT1", 2) ;

                        // push PC
                        var value  = simcore_native_get_value("CPU", "REG_PC") ;
                        var reg_sp = simcore_native_get_value("BR", 29) ;
                        reg_sp = reg_sp - 4 ;
                        simcore_native_set_value("MEMORY", reg_sp, value) ;
                        simcore_native_set_value("BR", 29, reg_sp) ;

                        // push SR
                        value  = simcore_native_get_value("CPU", "REG_SR") ;
                        reg_sp = simcore_native_get_value("BR", 29) ;
                        reg_sp = reg_sp - 4 ;
                        simcore_native_set_value("MEMORY", reg_sp, value) ;
                        simcore_native_set_value("BR", 29, reg_sp) ;

                        // MAR <- RT1*4
                        var addr = simcore_native_get_value("CPU", "REG_RT1") ;
                        addr = 4 * addr ;
                        simcore_native_set_value("CPU", "REG_MAR", addr) ;

                        // PC <- MBR <- MP[MAR]
                        addr = simcore_native_get_value("MEMORY", addr) ;
                        simcore_native_set_value("CPU", "REG_PC", addr) ;

                        // fetch
                        simcore_native_go_maddr(0) ;
            }
}

reti {
            co=111111,
            nwords=1,
            native,
            {
                // pop SR
                var reg_sp = simcore_native_get_value("BR", 29) ;
                var value  = simcore_native_get_value("MEMORY", reg_sp) ;
                reg_sp = reg_sp + 4 ;
                simcore_native_set_value("CPU", "REG_SR", value) ;
                simcore_native_set_value("BR", 29, reg_sp) ;

                // pop PC
                var reg_sp = simcore_native_get_value("BR", 29) ;
                var value  = simcore_native_get_value("MEMORY", reg_sp) ;
                reg_sp = reg_sp + 4 ;
                simcore_native_set_value("CPU", "REG_PC", value) ;
                simcore_native_set_value("BR", 29, reg_sp) ;

                simcore_native_go_maddr(0) ;
            }
}


#
# IN/OUT
#

in reg val {
            co=111111,
            nwords=1,
            reg=reg(25,21),
            val=inm(15,0),
            native,
            {
                // fields is a default parameter with the instruction field information
                var reg1   = simcore_native_get_field_from_ir(fields, 0) ;
                var addr   = simcore_native_get_field_from_ir(fields, 1) ;

                var value = simcore_native_get_value("DEVICE", addr) ;
                simcore_native_set_value("BR", reg1, value) ;

                simcore_native_go_maddr(0) ;
            }
}

out reg val {
            co=111111,
            nwords=1,
            reg=reg(25,21),
            val=inm(15,0),
            native,
            {
                // fields is a default parameter with the instruction field information
                var reg1   = simcore_native_get_field_from_ir(fields, 0) ;
                var addr   = simcore_native_get_field_from_ir(fields, 1) ;

                var value = simcore_native_get_value("BR", reg1) ;
                simcore_native_set_value("DEVICE", addr, value) ;

                simcore_native_go_maddr(0) ;
            }
}


#
# https://www.zilog.com/manage_directlink.php?filepath=docs/z80/um0080&extn=.pdf
# Z80-like
#

ld r1 r2 {
            co=111111,
            nwords=1,
            r1=reg(25,21),
            r2=reg(20,16),
            native,
            {
                // fields is a default parameter with the instruction field information
                var reg1   = simcore_native_get_field_from_ir(fields, 0) ;
                var reg2   = simcore_native_get_field_from_ir(fields, 1) ;

		var val1 = simcore_native_get_value("BR", reg1) ;
                           simcore_native_set_value("BR", reg2, val1) ;

                simcore_native_go_maddr(0) ;
            }
}

ld r1 i16 {
            co=111111,
            nwords=1,
            r1=reg(25,21),
            i16=inm(15,0),
            native,
            {
                // fields is a default parameter with the instruction field information
                var reg1 = simcore_native_get_field_from_ir(fields, 0) ;
                var i16  = simcore_native_get_field_from_ir(fields, 1) ;

                simcore_native_set_value("BR", reg1, i16) ;

                simcore_native_go_maddr(0) ;
            }
}

ld r1 (r2) {
            co=111111,
            nwords=1,
            r1=reg(25,21),
            r2=reg(20,16),
            native,
            {
                // fields is a default parameter with the instruction field information
                var r1 = simcore_native_get_field_from_ir(fields, 0) ;
                var r2 = simcore_native_get_field_from_ir(fields, 1) ;

                var addr   = simcore_native_get_value("BR", r2) ;
                var value  = simcore_native_get_value("MEMORY", addr) ;
                simcore_native_set_value("BR", r1, value) ;

                simcore_native_go_maddr(0) ;
            }
}

add_a reg1 {
            co=111111,
            nwords=1,
            reg1=reg(25,21),
            native,
            {
                // fields is a default parameter with the instruction field information
                var reg1   = simcore_native_get_field_from_ir(fields, 0) ;

                var result = simcore_native_get_value("BR", "R4") + simcore_native_get_value("BR", reg1) ;
                simcore_native_set_value("BR", reg1, "R4") ;

                simcore_native_go_maddr(0) ;
            }
}

sub_a reg1 {
            co=111111,
            nwords=1,
            reg1=reg(25,21),
            native,
            {
                // fields is a default parameter with the instruction field information
                var reg1   = simcore_native_get_field_from_ir(fields, 0) ;

                var result = simcore_native_get_value("BR", "R4") - simcore_native_get_value("BR", reg1) ;
                simcore_native_set_value("BR", reg1, "R4") ;

                simcore_native_go_maddr(0) ;
            }
}

add_a i16 {
            co=111111,
            nwords=1,
            i16=inm(15,0),
            native,
            {
                // fields is a default parameter with the instruction field information
                var i16   = simcore_native_get_field_from_ir(fields, 0) ;

                if (i16 & 0x00008000)
                    i16 = i16 | 0xFFFF0000 ;
                var result = simcore_native_get_value("BR", "R4") + i16 ;
                simcore_native_set_value("BR", reg1, "R4") ;

                simcore_native_go_maddr(0) ;
            }
}

sub_a i16 {
            co=111111,
            nwords=1,
            i16=inm(15,0),
            native,
            {
                // fields is a default parameter with the instruction field information
                var i16   = simcore_native_get_field_from_ir(fields, 0) ;

                if (i16 & 0x00008000)
                    i16 = i16 | 0xFFFF0000 ;
                var result = simcore_native_get_value("BR", "R4") + i16 ;
                simcore_native_set_value("BR", reg1, "R4") ;

                simcore_native_go_maddr(0) ;
            }
}

jp_c i16 {
            co=111111,
            nwords=1,
            i16=inm(15,0),
            native,
            {
                // fields is a default parameter with the instruction field information
                var i16   = simcore_native_get_field_from_ir(fields, 0) ;

		var flags = simcore_native_get_value("CPU", "REG_SR") ;
                if (flags & 0x80000000) {
                    simcore_native_set_value("CPU", "REG_PC", i16) ;
                }

                simcore_native_go_maddr(0) ;
            }
}

jp_v i16 {
            co=111111,
            nwords=1,
            i16=inm(15,0),
            native,
            {
                // fields is a default parameter with the instruction field information
                var i16   = simcore_native_get_field_from_ir(fields, 0) ;

		var flags = simcore_native_get_value("CPU", "REG_SR") ;
                if (flags & 0x40000000) {
                    simcore_native_set_value("CPU", "REG_PC", i16) ;
                }

                simcore_native_go_maddr(0) ;
            }
}

jp_n i16 {
            co=111111,
            nwords=1,
            i16=inm(15,0),
            native,
            {
                // fields is a default parameter with the instruction field information
                var i16   = simcore_native_get_field_from_ir(fields, 0) ;

		var flags = simcore_native_get_value("CPU", "REG_SR") ;
                if (flags & 0x20000000) {
                    simcore_native_set_value("CPU", "REG_PC", i16) ;
                }

                simcore_native_go_maddr(0) ;
            }
}

jp_z i16 {
            co=111111,
            nwords=1,
            i16=inm(15,0),
            native,
            {
                // fields is a default parameter with the instruction field information
                var i16   = simcore_native_get_field_from_ir(fields, 0) ;

		var flags = simcore_native_get_value("CPU", "REG_SR") ;
                if (flags & 0x10000000) {
                    simcore_native_set_value("CPU", "REG_PC", i16) ;
                }

                simcore_native_go_maddr(0) ;
            }
}

call i16 {
            co=111111,
            nwords=1,
            i16=inm(15,0),
            native,
            {
                // fields is a default parameter with the instruction field information
                var i16   = simcore_native_get_field_from_ir(fields, 0) ;

		var value  = simcore_native_get_value("CPU", "REG_PC") ;
		var reg_sp = simcore_native_get_value("BR", 29) ;
		reg_sp = reg_sp - 4 ;
		simcore_native_set_value("MEMORY", reg_sp, value) ;
		simcore_native_set_value("BR", 29, reg_sp) ;
                simcore_native_set_value("CPU", "REG_PC", i16) ;

                simcore_native_go_maddr(0) ;
            }
}

ret {
            co=111111,
            nwords=1,
            native,
            {
                var reg_sp = simcore_native_get_value("BR",     29) ;
                var value  = simcore_native_get_value("MEMORY", reg_sp) ;
                reg_sp = reg_sp + 4 ;
                simcore_native_set_value("CPU", "REG_PC", value) ;
                simcore_native_set_value("BR",        29, reg_sp) ;

                simcore_native_go_maddr(0) ;
            }
}

halt {
            co=111111,
            nwords=1,
            native,
            {
                simcore_native_set_value("CPU", "REG_PC", 0) ;

                simcore_native_go_maddr(0) ;
            }
}

push r1 {
            co=111111,
            nwords=1,
            r1=reg(25,21),
            native,
            {
                // fields is a default parameter with the instruction field information
                var reg1 = simcore_native_get_field_from_ir(fields, 0) ;

		var value  = simcore_native_get_value("CPU", reg1) ;
		var reg_sp = simcore_native_get_value("BR", 29) ;
		reg_sp = reg_sp - 4 ;
		simcore_native_set_value("MEMORY", reg_sp, value) ;
		simcore_native_set_value("BR", 29, reg_sp) ;

                simcore_native_go_maddr(0) ;
            }
}

pop r1 {
            co=111111,
            nwords=1,
            r1=reg(25,21),
            native,
            {
                // fields is a default parameter with the instruction field information
                var reg1 = simcore_native_get_field_from_ir(fields, 0) ;

                var reg_sp = simcore_native_get_value("BR",     29) ;
                var value  = simcore_native_get_value("MEMORY", reg_sp) ;
                reg_sp = reg_sp + 4 ;
                simcore_native_set_value("CPU", reg1, value) ;
                simcore_native_set_value("BR",    29, reg_sp) ;

                simcore_native_go_maddr(0) ;
            }
}


#
# Register naming
#

registers
{
        0=R0,
        1=R1,
        2=R2,
        3=R3,
        4=a,
        5=bc,
        6=de,
        7=hl,
        8=ix,
        9=iy,
        10=R10,
        11=R11,
        12=R12,
        13=R13,
        14=R14,
        15=R15,
        16=R16,
        17=R17,
        18=R18,
        19=R19,
        20=R20,
        21=R21,
        22=R22,
        23=R23,
        24=R24,
        25=R24,
        26=R26,
        27=R27,
        28=R28,
        29=sp (stack_pointer),
        30=R30,
        31=R31
}

