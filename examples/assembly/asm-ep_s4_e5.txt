
#
# KERNEL: 
#  + vector:  event handler table (vector
#  + ptable:  processes table 
#  + current: point to the process table entry of the running coroutine
#

.kdata
   vector:  .word rt_i0
            .word rt_div0
            .word rt_sys

   ptable:  # slide + address + next as offset + free slot
            .word 500
            .word coroutine1
            .word 20
            .word 0
            # slide + address + next as offset + free slot
            .word 500
            .word coroutine2
            .word -20
            .word 0

   current: .word 0

   msgi1:   .asciiz "FPE: / by 0\n"


.ktext
sys_prt_str: li   $1 1
             li   $0 0
             beq  $26 $0 fin1
         b5: lb   $27 ($26)
             beq  $27 $0 fin1
             out  $27 0x1000
             add  $26 $26 $1
             b  b5
       fin1: reti
      
sys_prt_int: li   $1 1
             # push_byte('\0')
             sb   $0 ($sp)
             sub  $sp $sp $1
             bge  $26 $0 b3
             li  $1  '-'
             out $1  0x1000
             li  $1  -1
             mul $26 $26 $1
         b3: # push_byte(rem(x,10)+48)
             # x = div(x,10)
             li   $1 10
             rem  $27 $26 $1
             div  $26 $26 $1
             li   $1 48
             add  $27 $27 $1
             li   $1 1
             sb   $27 ($sp)
             sub  $sp $sp $1
             bne  $26 $0 b3
         f3: # print_string($sp)
             add  $sp $sp $1
             lb   $27 ($sp)
             beq  $27 $0 f2
             out  $27 0x1000
             b f3
         f2: reti

sys_prt_ch:  out  $a0 0x1000
             reti


sys_rd_ch:   li   $0  0
  notready3: # ch=get_char()
             in   $27 0x0104
             beq  $27 $0 notready3
             in   $v0 0x0100
             out  $v0 0x1000 # echo
             reti

sys_exit:    # pA->free = true
             li  $26 12
             la  $27 current
             add $27 $27 $26
             li  $26 1
             sw  $26 ($27)
             # pA = scheduler() // pA->next
             li  $26 8
             la  $27 current
             add $27 $27 $26
             lw  $26 ($27)
             la  $27 current
             add $27 $27 $26
             sw  $27 current
             # if pA->free == true return
             li  $26 12
             la  $27 current
             add $27 $27 $26
             lw  $26 ($27)
             li  $27 1
             beq $27 $26 e_sys_exit
             # cpu.pc = pA->pc
             li  $26 4
             lw  $27 current
             add $27 $27 $26
             lw $26 ($27)
             sw $26 ($29)
             # return
             reti
 e_sys_exit: li $26 0
             sw $26 current
             la $26 end_rr
             sw $26 ($29)
             # return
             reti

   rt_sys:   # 1.- syscall
             move $26 $a0
             li   $27 4
             beq  $v0 $27 sys_prt_str
             li   $27 1
             beq  $v0 $27 sys_prt_int
             li   $27 10
             beq  $v0 $27 sys_exit
             li   $27 11
             beq  $v0 $27 sys_prt_ch
             li   $27 12
             beq  $v0 $27 sys_rd_ch
             reti 

   rt_i0:    # 2.- interrupt
             # if pA == NULL return
             li  $26 0
             lw  $27 current
             beq $27 $26 e_i0
             # pA->r = pA->r - 1
             li  $26 1
             lw  $27 current
             sub $27 $27 $26
             sw  $27 current
             # if pA->r == 0 return
             li  $26 0
             bne $27 $26 e_i0
       r_i0: # pA->r = 500
             li  $26 500
             sw  $26 current
             # pA->pc = cpu.pc
             li  $26 4
             la  $27 current
             add $27 $27 $26
             lw $26 ($29)
             sw $26 ($27)
             # pA = scheduler() // pA->next
             li  $26 4
             la  $27 current
             add $27 $27 $26
             lw  $26 ($27)
             la  $27 current
             add $27 $27 $26
             sw  $27 current
             # cpu.pc = pA->pc
             li  $26 4
             lw  $27 current
             add $27 $27 $26
             lw $26 ($27)
             sw $26 ($29)
             # return
       e_i0: reti 

   rt_div0:  # 3.- exception
             la   $26 msgi1
             b    sys_prt_str


   kmain:    
   begin_rr: # 1.- enable i0
             li  $t0 0
             out $t0 0x1104
             li  $t0 700
             out $t0 0x1108

             # 2.- setting initial context for coroutine 1
             la $t0 ptable
             sw $t0 current
             # TODO: update 'jal ...' with something else
             jal coroutine1

   end_rr:   # 3.- disable i0
             li  $t0 0
             out $t0 0x1104
             li  $t0 0
             out $t0 0x1108

             # 4.- the end
             jr $ra


#
# USER: 
#  + coroutine1 + coroutine2
#

.text
    coroutine1:
           # coroutine 1
           li $t0 0
       c1: li $t1 10000
           bge $t0 $t1 e1
           # print 'a'
           li  $a0 'a'
           li  $v0 11
           syscall
           # +1
           li  $t1 1
           add $t0 $t0 $t1
           b c1
       e1: jr $ra

    coroutine2:
           # coroutine 2
           li $t2 0
       c2: li $t3 5000
           bge $t2 $t3 e2
           # print 'b'
           li  $a0 'b'
           li  $v0 11
           syscall
           # +1
           li  $t3 1
           add $t2 $t2 $t3
           b c2
       e2: jr $ra

