.kdata
   vector:  .word rt_i0
            .word rt_div0
            .word rt_sys

   msgi0:   .asciiz "INT: 0\n"
   msgi1:   .asciiz "FPE: div. by 0\n"

.ktext
sys_prt_str: li   $1 1
         b5: lb   $27 ($t0)
             beq  $27 $0 fin1
             out  $27 0x1000
             add  $t0 $t0 $1
             b  b5
       fin1: reti
      
sys_prt_int: # push $fp, $a0
             li   $1 4
             sw   $a0 ($sp)
             sub  $sp $sp $1
             sw   $fp ($sp)
             sub  $sp $sp $1
             move $fp $sp
             # '\0' -> ($sp)
             li   $1 1
             sb   $0 ($sp)
             sub  $sp $sp $1
         b3: # rem(x,10) -> ($sp)
             li   $1 10
             div  $26 $a0 $1
             rem  $27 $a0 $1
             li   $1 48
             add  $27 $27 $1
             li   $1 1
             sb   $27 ($sp)
             sub  $sp $sp $1
             move $a0 $26
             bne  $a0 $0 b3
         f3: # print_string($sp)
             add  $sp $sp $1
             lb   $27 ($sp)
             beq  $27 $0 f2
             out  $27 0x1000
             b f3
         f2: # pop $fp, $a0
             li   $1 4
             move $sp $fp
             add  $sp $sp $1
             lw   $fp ($sp)
             add  $sp $sp $1
             lw   $a0 ($sp)
             reti

   rt_i0:    # 1.- interruption
             la   $t0 msgi0
             b    sys_prt_str

   rt_div0:  # 2.- exception
             la   $t0 msgi1
             b    sys_prt_str

   rt_sys:   # 3.- syscall
             move $t0 $a0
             li   $t1 4
             beq  $v0 $t1 sys_prt_str
             li   $t1 1
             beq  $v0 $t1 sys_prt_int
             reti 


.data
    hello: .asciiz " times hello world... \n"

.text
    main:  # test syscall 1
           li  $a0 12345
           li  $v0 1
           syscall

           # test syscall 4
           la  $a0 hello
           li  $v0 4
           syscall

           # test div 0/0
           li  $t0 0
           li  $t1 0
           div $t1 $t1 $t0

           # test int0
           li  $t0 0
           out $t0 0x1104
           li  $t0 500
           out $t0 0x1108

           li  $t0 0
           li  $t1 1
           li  $t2 20
       b1: beq $t0 $t2 e1
           add $t0 $t0 $t1
           b b1

       e1: li  $t0 0
           out $t0 0x1104
           out $t0 0x1108

           # the end
           jr $ra

